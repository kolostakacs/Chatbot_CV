import os
import openai
import psycopg2
from dotenv import load_dotenv

# PostgreSQL adatb√°zis el√©r√©si √∫tvonala
dotenv_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "../../backend/.env"))
load_dotenv(dotenv_path)

# PostgreSQL kapcsolat
DB_URL = os.getenv("DB_URL")

# OpenAI API kulcs bet√∂lt√©se k√∂rnyezeti v√°ltoz√≥b√≥l
openai.api_key = os.getenv("OPENAI_API_KEY")


def get_embedding(text):
    """
    Gener√°l egy embedding vektort egy adott sz√∂veghez az OpenAI API seg√≠ts√©g√©vel.
    """
    client = openai.OpenAI()  # Az √∫j API szerint inicializ√°lni kell egy OpenAI klienst
    response = client.embeddings.create(
        input=text,  # Most m√°r sim√°n stringk√©nt kell megadni
        model="text-embedding-ada-002"
    )
    return response.data[0].embedding


def search_similar_text(search_text):
    """
    Keres a PGVector adatb√°zisban a legjobban illeszked≈ë sz√∂vegre.
    """
    embedding = get_embedding(search_text)

    conn = psycopg2.connect(DB_URL)
    cursor = conn.cursor()

    query = """
    SELECT text, 1 - (embedding <=> %s::vector) AS similarity
    FROM text_vectors
    ORDER BY similarity DESC
    LIMIT 1;
    """

    cursor.execute(query, (embedding,))
    result = cursor.fetchone()

    conn.close()

    if result:
        print(f"üîé Legjobb tal√°lat: {result[0]} (Hasonl√≥s√°g: {result[1]:.4f})")
    else:
        print("‚ùå Nem tal√°ltunk relev√°ns v√°laszt.")


# Teszt k√©rd√©s
search_text = "What is your education like?"
search_similar_text(search_text)